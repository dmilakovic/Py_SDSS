#!/usr/bin/env python
# dm: 2018/10/15 Modified for python3
# This script creates FITS files from DR12 data
# which contains weather data (individual exposures)
# and calculates the correction function for every single file
# using the 2D or 1D gaussian integral written ctypes
# As an INPUT you only give a list of files with weather data

# dm: python PyS_SDSS-script_1 $path/to/the/spectra
#     script reads FITS files from $path/to/the/spectra
#     and caluclates the correction function
#     new FITS files are created at $path.to_script1_output
#     (see SDSSmodules.SDSSpaths)



import SDSSmodules.SDSSclasses as SDSSclasses

import numpy as np
import os
import glob
import sys
import argparse
import json

# # the multiprocessing module
import multiprocessing as mp



def do_multiprocess(files,settings):
    ''' Splits up the files provided into n batches, where n is the number of 
        processors defined in the settings file. Runs each batch in a separate
        process by invoking 'do_batch' ''' 
    nproc = settings['nproc']
    batches = np.array_split(files,nproc)
    processes = []
    for i in range(nproc):
        batch = batches[i]
        if len(batch)==0:
            continue
        p = mp.Process(target=do_batch,args=((batch,settings,)))
        processes.append(p)
        p.start()
    for p in processes:
        print(p)
        p.join(timeout=2)  
        
def do_batch(batch,settings):
    ''' Calls 'do_single_file' for all files in this batch'''
    if type(batch)==np.int64:
        batch=[batch]
    for i,filepath in enumerate(batch):
        do_single_file(filepath,settings)
def do_single_file(filepath,settings):
    ''' Performs fibre offset correction for a single spectrum ''' 
    spec = SDSSclasses.spectrum()
    cenwav = settings.pop('cenwav',None)
    alpha  = settings.pop('alpha',None)
    spec.correct_offset(filepath,settings['savedir'],cenwav=cenwav,alpha=alpha)
    return


def print_settings(settings):
    print("{0:=^80}".format(""))
    print("{0:=^80}".format("  S E T T I N G S  "))
    print("{0:=^80}".format(""))
    for key,val in settings.items():
        print("{0:>10}  =  {1:>65}".format(key,val))
    print("{0:=^80}".format(""))
def filename2rootname(filepath_list):
    if type(filepath_list)==list:
        pass
    else:
        filepath_list = [filepath_list]
    rootlist = []
    for filepath in filepath_list:
        basename = os.path.basename(filepath)
        rootname = os.path.splitext(basename)[0]
        rootlist.append(rootname)
    return rootlist
def main(args):
    json_file = vars(args)['settings_file']
    with open(json_file,'r') as f:
        settings = json.load(f)
    # path to the folder with the new FITS files
    print_settings(settings)
    savedir = settings['savedir']
    # return all files that are in the target folder
    try: 
        datadir = settings['datadir']
        files = glob.glob(os.path.join(datadir,'*.fits'))
    except:
        datafile = settings['datafile']
        files = []
        with open(datafile, 'r') as filelist:
            for line in filelist:
                files.append(line)
    n_to_correct = np.size(files)
    
    # return objects that were already corrected
    files_corrected = glob.glob(os.path.join(savedir,'*.fits'))
    n_corrected = np.size(files_corrected)
    
    print('{0:<20} : {1:>10d}'.format('Spectra to correct',n_to_correct))
    print('{0:<20} : {1:>10d}'.format('Already corrected',n_corrected))

    # difference of sets (corrected in to_correct)
    spec_uncorrected = filename2rootname(files)
    spec_corrected   = filename2rootname(files_corrected)
    spec_to_correct  = np.setdiff1d(spec_uncorrected,spec_corrected)
    
    if len(spec_to_correct) == 0:
        sys.exit('{0:=^80}'.format(' All files provided have already been corrected. Exiting. '))
    n_to_correct = np.size(spec_to_correct)
    print('{0:<20} : {1:>10d}'.format('Spectra to work on',n_to_correct))
    print("{0:=^80}".format(""))
    # revert filenames to full path
    filepaths_to_correct = []
    for rootname in spec_to_correct:
        basename = rootname+'.fits'
        
        filepaths_to_correct.append(os.path.join(datadir, basename))

    
    key = input("Press any key to continue")
    
    do_multiprocess(filepaths_to_correct,settings)
    

    
if __name__ == "__main__":
    # read settings from file
    
    parser = argparse.ArgumentParser()

    parser.add_argument('--settings-file', type=str, default=None,
        help='File with the settings')

    args = parser.parse_args()
    main(args)
